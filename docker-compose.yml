version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:latest
    container_name: smartlink_mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: smartlinks
    networks:
      - smartlink_network

  # Redis Cache
  redis:
    image: redis:alpine
    container_name: smartlink_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - smartlink_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: smartlink_backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    depends_on:
      - mongodb
      - redis
    environment:
      NODE_ENV: production
      PORT: 3001
      MONGODB_URI: mongodb://admin:password@mongodb:27017/smartlinks?authSource=admin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_change_in_production}
      ADMIN_KEY: ${ADMIN_KEY:-your_admin_key}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - smartlink_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (React)
  frontend:
    build:
      context: ./frontend-clean
      dockerfile: Dockerfile
    container_name: smartlink_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      REACT_APP_API_URL: http://localhost:3001
      REACT_APP_ADMIN_KEY: ${ADMIN_KEY:-your_admin_key}
    volumes:
      - ./frontend-clean:/app
      - /app/node_modules
    networks:
      - smartlink_network

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: smartlink_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - smartlink_network

volumes:
  mongodb_data:
  redis_data:

networks:
  smartlink_network:
    driver: bridge